#!/usr/bin/env node

const cluster = require("cluster");
const os = require("os");
const app = require("../app");
const debug = require("debug")("financeapp:server");
const http = require("http");
const seedUsers = require("../seeders/userSeeders");

const numCpus = os.cpus().length;
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Start the server before seeding
  for (let i = 0; i < numCpus; i++) {
    console.log(`Forking worker ${i + 1}`);
    cluster.fork();
  }


} else {
  const server = http.createServer(app);

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
  

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() {
    const addr = server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log(`Server is running at http://localhost:${port}`);
   
  }
  
}

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val; // named pipe
  }
  if (port >= 0) {
    return port; // port number
  }
  return false;
}
